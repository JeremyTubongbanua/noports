#!/bin/bash

scriptName=$(basename -- "$0")

if test -z "$testScriptsDir" ; then
  echo -e "    ${RED}check_env: testScriptsDir is not set${NC}" && exit 1
fi

source "$testScriptsDir/common/common_functions.include.sh"
source "$testScriptsDir/common/check_env.include.sh" || exit $?

if test $# != 3 ; then
  logErrorAndExit "Must supply daemonVersion, clientVersion and ssh client to use"
fi

daemonVersion="$1"
clientVersion="$2"
sshClient="$3"

# logInfo "Daemon version : $d_type : $d_major.$d_minor.$d_patch"
deviceName=$(getDeviceNameWithFlags "$commitId" "$daemonVersion" )

# logInfo "Client version : $c_type : $c_major.$c_minor.$c_patch"
clientBinaryPath=$(getPathToBinariesForTypeAndVersion "$clientVersion")

#
# v5 feature set
# - authenticate to the srvd
# - end-to-end-encrypt the traffic via the srvd

# 1. All client versions since 5 require the '-x' flag in order to output the
# ssh command rather than just forking to the ssh inline.
if [[ $(versionIsAtLeast "$clientVersion" "d:5.0.0") == "true" ]] ; then
  extraFlags="-x"
fi

# Daemon versions prior to 5 do not support rvd authentication nor end-to-end encryption
if [[ $(versionIsLessThan "$daemonVersion" "d:5.0.0") == "true" ]]; then
  exit 50 # test rig interprets this exit status as 'test was not applicable'
fi

# Client versions prior to 5 do not support rvd authentication nor end-to-end encryption
if [[ $(versionIsLessThan "$clientVersion" "d:5.0.0") == "true" ]]; then
  exit 50 # test rig interprets this exit status as 'test was not applicable'
fi

l1="$clientBinaryPath/sshnp -f $clientAtSign -d $deviceName -i $identityFilename"
l2=" -t $daemonAtSign -h $srvAtSign -u $remoteUsername"
l3=" --ssh-client $sshClient"
l4=" --root-domain $atDirectoryHost"
l5=" ${extraFlags}"
sshnpCommand="$l1 $l2 $l3 $l4 $l5 -s ${identityFilename}.pub"

echo "$(iso8601Date) | Executing $sshnpCommand" | tee -a "$(getReportFile)"
sshCommand="$($sshnpCommand)"
sshnpExitStatus=$?
if (( sshnpExitStatus != 0 )); then
  exit $sshnpExitStatus
fi

echo "$(iso8601Date) | Executing $sshCommand" | tee -a "$(getReportFile)"

# shellcheck disable=SC2091
$(getTestSshCommand "$sshCommand")
