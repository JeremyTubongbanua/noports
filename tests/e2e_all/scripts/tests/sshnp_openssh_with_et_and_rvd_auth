#!/bin/bash

scriptName=$(basename -- "$0")

if test -z "$testScriptsDir" ; then
  echo -e "    ${RED}check_env: testScriptsDir is not set${NC}" && exit 1
fi

source "$testScriptsDir/common/common_functions.include.sh"
source "$testScriptsDir/common/check_env.include.sh" || exit $?


if test $# != 2 ; then
  logErrorAndExit "Must supply daemonVersion, clientVersion"
fi

daemonVersion="$1"
clientVersion="$2"

# logInfo "Daemon version : $d_type : $d_major.$d_minor.$d_patch"
deviceName=$(getNoFlagsDeviceNameForCommitIDTypeAndVersion "$commitId" "$daemonVersion" )

# logInfo "Client version : $c_type : $c_major.$c_minor.$c_patch"
clientBinaryPath=$(getPathToBinariesForTypeAndVersion "$clientVersion")

#
# v5 feature set, default client flags
# - authenticate to the srvd
# - end-to-end-encrypt the traffic via the srvd
# - do not send public key to daemon
# - do not detect public key from daemon
# - use openssh as the ssh client (vs pure dart)
#

# 1. All client versions since 5 require the '-x' flag in order to output the
# ssh command rather than just forking to the ssh inline.
if [[ $(versionIsAtLeast "$clientVersion" "d:5.0.0") == "true" ]] ; then
  v5Flags="-x"
fi

# Daemon versions prior to 5 do not support rvd authentication nor end-to-end encryption
if [[ $(versionIsLessThan "$daemonVersion" "d:5.0.0") == "true" ]]; then
  echo "Daemon version $daemonVersion is less than required version for this test d:5:0:0 - will ignore this test" >> $(getReportFile)
  exit 50
fi

# Client versions prior to 5 do not support rvd authentication nor end-to-end encryption
if [[ $(versionIsLessThan "$clientVersion" "d:5.0.0") == "true" ]]; then
  echo "Client version $clientVersion is less than required version for this test d:5:0:0 - will ignore this test" >> $(getReportFile)
  exit 50
fi

remoteUser="gary"

identityFile=~/.ssh/noports
l1="$clientBinaryPath/sshnp -f $clientAtSign -d $deviceName -i $identityFile"
l2=" -t $daemonAtSign -h $srvAtSign -u $remoteUser"
l3=" --ssh-client openssh"
l4=" --root-domain $atDirectoryHost"
l5=" ${v5Flags}"
command="$l1 $l2 $l3 $l4 $l5"

echo "$(iso8601Date) | Executing $command" | tee -a "$(getReportFile)"

# shellcheck disable=SC2091
$($command) <<< 'echo $(date) $(whoami) $(hostname) TEST PASSED'
